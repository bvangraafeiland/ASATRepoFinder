<?php
return [
    'AbcSize' => 'Metric',
    'AccessModifierIndentation' => 'Style Conventions',
    'AccessorMethodName' => 'Naming Conventions',
    'ActionFilter' => 'Best Practices',
    'Alias' => 'Best Practices',
    'AlignArray' => 'Style Conventions',
    'AlignHash' => 'Style Conventions',
    'AlignParameters' => 'Style Conventions',
    'AmbiguousOperator' => 'Logic',
    'AmbiguousRegexpLiteral' => 'Logic',
    'AndOr' => 'Best Practices',
    'ArrayJoin' => 'Best Practices',
    'AsciiComments' => 'Documentation Conventions',
    'AsciiIdentifiers' => 'Naming Conventions',
    'AssignmentInCondition' => 'Logic',
    'Attr' => 'Best Practices',
    'AutoResourceCleanup' => 'Best Practices',
    'BarePercentLiterals' => 'Best Practices',
    'BeginBlock' => 'Best Practices',
    'BlockAlignment' => 'Style Conventions',
    'BlockComments' => 'Documentation Conventions',
    'BlockDelimiters' => 'Best Practices',
    'BlockEndNewline' => 'Style Conventions',
    'BlockNesting' => 'Metric',
    'Blocks' => 'Best Practices',
    'BracesAroundHashParameters' => 'Style Conventions',
    'CaseEquality' => 'Best Practices',
    'CaseIndentation' => 'Style Conventions',
    'CharacterLiteral' => 'Best Practices',
    'ClassAndModuleCamelCase' => 'Naming Conventions',
    'ClassAndModuleChildren' => 'Style Conventions',
    'ClassCheck' => 'Best Practices',
    'ClassLength' => 'Metric',
    'ClassMethods' => 'Best Practices',
    'ClassVars' => 'Best Practices',
    'ClosingParenthesisIndentation' => 'Style Conventions',
    'CollectionMethods' => 'Best Practices',
    'ColonMethodCall' => 'Style Conventions',
    'CommandLiteral' => 'Best Practices',
    'CommentAnnotation' => 'Documentation Conventions',
    'CommentIndentation' => 'Documentation Conventions',
    'ConditionPosition' => 'Style Conventions',
    'ConstantName' => 'Naming Conventions',
    'Copyright' => 'Best Practices',
    'CyclomaticComplexity' => 'Metric',
    'Date' => 'Interface',
    'Debugger' => 'Best Practices',
    'DefaultScope' => 'Best Practices',
    'DefEndAlignment' => 'Style Conventions',
    'DefWithParentheses' => 'Style Conventions',
    'Delegate' => 'Best Practices',
    'DeprecatedClassMethods' => 'Migration',
    'DeprecatedHashMethods' => 'Migration',
    'Detect' => 'Best Practices',
    'Documentation' => 'Documentation Conventions',
    'DotPosition' => 'Style Conventions',
    'DoubleNegation' => 'Redundancies',
    'DuplicateMethods' => 'Redundancies',
    'EachWithObject' => 'Best Practices',
    'ElseAlignment' => 'Style Conventions',
    'ElseLayout' => 'Style Conventions',
    'EmptyElse' => 'Redundancies',
    'EmptyEnsure' => 'Redundancies',
    'EmptyInterpolation' => 'Redundancies',
    'EmptyLineBetweenDefs' => 'Style Conventions',
    'EmptyLines' => 'Redundancies',
    'EmptyLinesAroundAccessModifier' => 'Style Conventions',
    'EmptyLinesAroundBlockBody' => 'Style Conventions',
    'EmptyLinesAroundBody' => 'Style Conventions',
    'EmptyLinesAroundClassBody' => 'Style Conventions',
    'EmptyLinesAroundMethodBody' => 'Style Conventions',
    'EmptyLinesAroundModuleBody' => 'Style Conventions',
    'EmptyLiteral' => 'Best Practices',
    'Encoding' => 'Best Practices',
    'EndAlignment' => 'Style Conventions',
    'EndBlock' => 'Best Practices',
    'EndInMethod' => 'Best Practices',
    'EndOfLine' => 'Style Conventions',
    'EnsureReturn' => 'Error Handling',
    'Eval' => 'Interface',
    'EvenOdd' => 'Best Practices',
    'ExtraSpacing' => 'Redundancies',
    'FileName' => 'Naming Conventions',
    'FindBy' => 'Best Practices',
    'FindEach' => 'Best Practices',
    'FirstParameterIndentation' => 'Style Conventions',
    'FlatMap' => 'Best Practices',
    'FlipFlop' => 'Best Practices',
    'For' => 'Best Practices',
    'FormatString' => 'Best Practices',
    'GlobalVars' => 'Best Practices',
    'GuardClause' => 'Simplifications',
    'HandleExceptions' => 'Error Handling',
    'HasAndBelongsToMany' => 'Best Practices',
    'HashSyntax' => 'Migration',
    'IfUnlessModifier' => 'Best Practices',
    'IfWithSemicolon' => 'Best Practices',
    'IndentArray' => 'Style Conventions',
    'IndentationConsistency' => 'Style Conventions',
    'IndentationWidth' => 'Style Conventions',
    'IndentHash' => 'Style Conventions',
    'InfiniteLoop' => 'Best Practices',
    'InlineComment' => 'Documentation Conventions',
    'InvalidCharacterLiteral' => 'Resource',
    'Lambda' => 'Best Practices',
    'LambdaCall' => 'Best Practices',
    'LeadingCommentSpace' => 'Documentation Conventions',
    'LineEndConcatenation' => 'Best Practices',
    'LineLength' => 'Metric',
    'LiteralInCondition' => 'Best Practices',
    'LiteralInInterpolation' => 'Best Practices',
    'Loop' => 'Best Practices',
    'MethodCalledOnDoEndBlock' => 'Best Practices',
    'MethodCallParentheses' => 'Style Conventions',
    'MethodDefParentheses' => 'Style Conventions',
    'MethodLength' => 'Metric',
    'MethodName' => 'Naming Conventions',
    'MissingElse' => 'Best Practices',
    'ModuleFunction' => 'Best Practices',
    'MultilineBlockChain' => 'Best Practices',
    'MultilineBlockLayout' => 'Style Conventions',
    'MultilineIfThen' => 'Best Practices',
    'MultilineOperationIndentation' => 'Style Conventions',
    'MultilineTernaryOperator' => 'Best Practices',
    'NegatedIf' => 'Best Practices',
    'NegatedWhile' => 'Best Practices',
    'NestedTernaryOperator' => 'Best Practices',
    'Next' => 'Best Practices',
    'NilComparison' => 'Best Practices',
    'NonLocalExitFromIterator' => 'Best Practices',
    'NonNilCheck' => 'Redundancies',
    'Not' => 'Best Practices',
    'NumericLiterals' => 'Style Conventions',
    'OneLineConditional' => 'Best Practices',
    'OpMethod' => 'Naming Conventions',
    'Output' => 'Best Practices',
    'ParameterLists' => 'Metric',
    'ParenthesesAroundCondition' => 'Style Conventions',
    'ParenthesesAsGroupedExpression' => 'Style Conventions',
    'PerceivedComplexity' => 'Metric',
    'PercentLiteralDelimiters' => 'Best Practices',
    'PercentQLiterals' => 'Best Practices',
    'PerlBackrefs' => 'Best Practices',
    'PredicateName' => 'Naming Conventions',
    'Proc' => 'Best Practices',
    'RaiseArgs' => 'Error Handling',
    'ReadWriteAttribute' => 'Best Practices',
    'RedundantBegin' => 'Best Practices',
    'RedundantException' => 'Redundancies',
    'RedundantReturn' => 'Redundancies',
    'RedundantSelf' => 'Redundancies',
    'RegexpLiteral' => 'Best Practices',
    'RequireParentheses' => 'Style Conventions',
    'RescueException' => 'Error Handling',
    'RescueModifier' => 'Error Handling',
    'ReverseEach' => 'Best Practices',
    'Sample' => 'Best Practices',
    'ScopeArgs' => 'Best Practices',
    'SelfAssignment' => 'Best Practices',
    'Semicolon' => 'Style Conventions',
    'ShadowingOuterLocalVariable' => 'Best Practices',
    'SignalException' => 'Error Handling',
    'SingleLineBlockParams' => 'Naming Conventions',
    'SingleLineMethods' => 'Best Practices',
    'SingleSpaceBeforeFirstArg' => 'Style Conventions',
    'Size' => 'Best Practices',
    'SpaceAfterColon' => 'Style Conventions',
    'SpaceAfterComma' => 'Style Conventions',
    'SpaceAfterControlKeyword' => 'Style Conventions',
    'SpaceAfterMethodName' => 'Style Conventions',
    'SpaceAfterNot' => 'Style Conventions',
    'SpaceAfterSemicolon' => 'Style Conventions',
    'SpaceAroundBlockParameters' => 'Style Conventions',
    'SpaceAroundEqualsInParameterDefault' => 'Style Conventions',
    'SpaceAroundOperators' => 'Style Conventions',
    'SpaceBeforeBlockBraces' => 'Style Conventions',
    'SpaceBeforeComma' => 'Style Conventions',
    'SpaceBeforeComment' => 'Style Conventions',
    'SpaceBeforeFirstArg' => 'Style Conventions',
    'SpaceBeforeModifierKeyword' => 'Style Conventions',
    'SpaceBeforeSemicolon' => 'Style Conventions',
    'SpaceInsideBlockBraces' => 'Style Conventions',
    'SpaceInsideBrackets' => 'Style Conventions',
    'SpaceInsideHashLiteralBraces' => 'Style Conventions',
    'SpaceInsideParens' => 'Style Conventions',
    'SpaceInsideRangeLiteral' => 'Style Conventions',
    'SpecialGlobalVars' => 'Best Practices',
    'StringConversionInInterpolation' => 'Redundancies',
    'StringLiterals' => 'Style Conventions',
    'StringLiteralsInInterpolation' => 'Style Conventions',
    'StructInheritance' => 'Interface',
    'SymbolArray' => 'Best Practices',
    'SymbolLiteral' => 'Best Practices',
    'SymbolProc' => 'Best Practices',
    'Tab' => 'Style Conventions',
    'TimeZone' => 'Interface',
    'TrailingBlankLines' => 'Style Conventions',
    'TrailingComma' => 'Style Conventions',
    'TrailingWhitespace' => 'Redundancies',
    'TrivialAccessors' => 'Best Practices',
    'UnderscorePrefixedVariableName' => 'Naming Conventions',
    'UnlessElse' => 'Best Practices',
    'UnneededCapitalW' => 'Best Practices',
    'UnneededPercentQ' => 'Best Practices',
    'UnneededPercentX' => 'Best Practices',
    'UnreachableCode' => 'Redundancies',
    'UnusedBlockArgument' => 'Redundancies',
    'UnusedMethodArgument' => 'Redundancies',
    'UselessAccessModifier' => 'Redundancies',
    'UselessAssignment' => 'Redundancies',
    'UselessComparison' => 'Redundancies',
    'UselessElseWithoutRescue' => 'Redundancies',
    'UselessSetterCall' => 'Redundancies',
    'Validation' => 'Best Practices',
    'VariableInterpolation' => 'Best Practices',
    'VariableName' => 'Naming Conventions',
    'Void' => 'Check',
    'WhenThen' => 'Best Practices',
    'WhileUntilDo' => 'Best Practices',
    'WhileUntilModifier' => 'Best Practices',
    'WordArray' => 'Best Practices',
];
